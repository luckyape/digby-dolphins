'use client';

import { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useAuth, UserRole } from '@/context/AuthContext';
import { useRouteProtection } from '@/hooks/useRouteProtection';
import Link from 'next/link';
import { httpsCallable } from 'firebase/functions';
import { functions } from '@/lib/firebase';

// Client component that uses useSearchParams
function RegisterForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [role, setRole] = useState<UserRole>('athlete');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [loading, setLoading] = useState(false);
  const [verifying, setVerifying] = useState(true);
  const [invitation, setInvitation] = useState<{
    id: string;
    email: string;
    role: UserRole;
  } | null>(null);
  const { register, logout, currentUser } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();

  // Get invitation token from URL
  const token = searchParams.get('token');
  const invitedEmail = searchParams.get('email');
  const invitedRole = searchParams.get('role') as UserRole | null;

  // Use route protection to redirect if already logged in (except for invitation links)
  const { isAuthenticated } = useRouteProtection();

  // Verify invitation token
  useEffect(() => {
    const verifyToken = async () => {
      // If no token, redirect to home page - registration requires an invitation
      if (!token || !invitedEmail) {
        setVerifying(false);
        setError('Registration requires a valid invitation link');
        return;
      }

      try {
        setVerifying(true);
        const verifyInvitation = httpsCallable(functions, 'verifyInvitation');
        const result = await verifyInvitation({ token, email: invitedEmail });
        const data = result.data as {
          valid: boolean;
          invitation?: any;
          error?: string;
        };

        if (data.valid && data.invitation) {
          setInvitation(data.invitation);
          setEmail(data.invitation.email);
          setRole(data.invitation.role as UserRole);
        } else {
          setError(data.error || 'Invalid or expired invitation link');
        }
      } catch (err: any) {
        console.error('Error verifying invitation:', err);
        setError(
          'Failed to verify invitation: ' + (err.message || 'Unknown error')
        );
      } finally {
        setVerifying(false);
      }
    };

    verifyToken();
  }, [token, invitedEmail, invitedRole]);

  // Helper function to get user-friendly error messages
  const getAuthErrorMessage = (errorCode: string): string => {
    switch (errorCode) {
      case 'auth/email-already-in-use':
        return 'This email is already registered';
      case 'auth/invalid-email':
        return 'Invalid email address format';
      case 'auth/weak-password':
        return 'Password is too weak. Use at least 6 characters';
      case 'auth/operation-not-allowed':
        return 'Registration is currently disabled';
      default:
        return 'An error occurred during registration';
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    // Validate inputs
    if (!email || !password || !confirmPassword || !displayName) {
      setError('Please fill in all fields');
      return;
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters long');
      return;
    }

    try {
      setLoading(true);

      // Register the user
      await register(email, password, displayName, role);

      // If this was an invited registration, mark the invitation as accepted
      if (invitation) {
        try {
          const acceptInvitation = httpsCallable(functions, 'acceptInvitation');
          await acceptInvitation({
            invitationId: invitation.id,
            userId: email, // We don't have the UID yet, but email is unique
          });
        } catch (inviteErr) {
          console.error('Error accepting invitation:', inviteErr);
          // Continue anyway, as the user is registered
        }
      }

      setSuccess('Registration successful! You can now log in.');

      // Redirect to login after a short delay
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (err: any) {
      console.error('Registration error:', err);
      setError(getAuthErrorMessage(err.code) || 'Failed to register');
    } finally {
      setLoading(false);
    }
  };

  if (verifying) {
    return (
      <div className='max-w-md mx-auto my-12 px-4 text-center'>
        <div className='bg-white rounded-lg shadow-md p-8 border-2 border-primary'>
          <div className='inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4'></div>
          <h1 className='text-xl font-bold text-secondary mb-4'>
            Verifying Invitation
          </h1>
          <p className='text-gray-600'>
            Please wait while we verify your invitation...
          </p>
        </div>
      </div>
    );
  }

  // If user is already logged in and viewing an invitation link, show a message
  if (isAuthenticated && token) {
    return (
      <div className='max-w-md mx-auto my-12 px-4'>
        <div className='bg-white rounded-lg shadow-md p-8 border-2 border-primary'>
          <h1 className='text-2xl font-bold text-secondary mb-6 text-center'>
            Already Logged In
          </h1>

          <div className='bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6'>
            <p className='text-yellow-800 text-sm'>
              You're already logged in as <strong>{currentUser?.email}</strong>.
              To use this invitation, please log out first or use a different
              browser.
            </p>
          </div>

          <div className='flex justify-center space-x-4'>
            <Link
              href='/'
              className='bg-secondary text-white font-bold py-2 px-4 rounded hover:bg-secondary-dark transition-colors'
            >
              Go to Homepage
            </Link>
            <button
              onClick={() => {
                // Log out and then reload the page to use the invitation
                logout();
                window.location.reload();
              }}
              className='bg-red-600 text-white font-bold py-2 px-4 rounded hover:bg-red-700 transition-colors'
            >
              Log Out
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className='max-w-md mx-auto my-12 px-4'>
      <div className='bg-white rounded-lg shadow-md p-8 border-2 border-primary'>
        <h1 className='text-2xl font-bold text-secondary mb-6 text-center'>
          {invitation ? 'Complete Your Registration' : 'Create an Account'}
        </h1>

        {invitation ? (
          <div className='bg-green-50 border border-green-200 rounded-lg p-4 mb-6'>
            <p className='text-green-800 text-sm'>
              You've been invited to join the Digby Dolphins Swim Team as a{' '}
              <strong>
                {invitation.role === 'athlete' ? 'Athlete' : 'Parent/Supporter'}
              </strong>
              . Please complete your registration below.
            </p>
          </div>
        ) : (
          <div className='bg-red-50 border border-red-200 rounded-lg p-4 mb-6'>
            <p className='text-red-800 text-sm'>
              Registration requires a valid invitation link. Please contact an
              administrator if you need an invitation to join the Digby Dolphins
              Swim Team.
            </p>
          </div>
        )}

        {error && (
          <div className='bg-red-50 border border-red-200 rounded-lg p-4 mb-6'>
            <p className='text-red-800 text-sm'>{error}</p>
          </div>
        )}

        {success && (
          <div className='bg-green-50 border border-green-200 rounded-lg p-4 mb-6'>
            <p className='text-green-800 text-sm'>{success}</p>
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className='mb-4'>
            <label
              htmlFor='email'
              className='block text-secondary font-medium mb-2'
            >
              Email Address
            </label>
            <input
              type='email'
              id='email'
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className='w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'
              placeholder='Enter your email address'
              disabled={loading || !!invitation} // Disable if using invitation
              readOnly={!!invitation} // Make read-only if using invitation
            />
            {invitation && (
              <p className='text-xs text-gray-500 mt-1'>
                Email address from invitation cannot be changed
              </p>
            )}
          </div>

          <div className='mb-4'>
            <label
              htmlFor='displayName'
              className='block text-secondary font-medium mb-2'
            >
              Full Name
            </label>
            <input
              type='text'
              id='displayName'
              value={displayName}
              onChange={(e) => setDisplayName(e.target.value)}
              className='w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'
              placeholder='Enter your full name'
              disabled={loading}
            />
          </div>

          <div className='mb-4'>
            <label
              htmlFor='role'
              className='block text-secondary font-medium mb-2'
            >
              I am a:
            </label>
            <select
              id='role'
              value={role}
              onChange={(e) => setRole(e.target.value as UserRole)}
              className='w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'
              disabled={loading || !!invitation} // Disable if using invitation
            >
              <option value='athlete'>Athlete</option>
              <option value='supporter'>Parent/Guardian</option>
            </select>
            {invitation && (
              <p className='text-xs text-gray-500 mt-1'>
                Role is determined by your invitation
              </p>
            )}
          </div>

          <div className='mb-4'>
            <label
              htmlFor='password'
              className='block text-secondary font-medium mb-2'
            >
              Password
            </label>
            <input
              type='password'
              id='password'
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className='w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'
              placeholder='Create a password (min. 6 characters)'
              disabled={loading}
            />
          </div>

          <div className='mb-6'>
            <label
              htmlFor='confirmPassword'
              className='block text-secondary font-medium mb-2'
            >
              Confirm Password
            </label>
            <input
              type='password'
              id='confirmPassword'
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className='w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'
              placeholder='Confirm your password'
              disabled={loading}
            />
          </div>

          <button
            type='submit'
            disabled={loading || !invitation}
            className='w-full bg-secondary text-primary font-bold py-3 px-4 rounded hover:bg-secondary-light transition duration-300 disabled:bg-gray-400 border-2 border-primary'
          >
            {loading
              ? 'Creating Account...'
              : invitation
              ? 'Register'
              : 'Invitation Required'}
          </button>
        </form>

        <div className='mt-6 text-center'>
          <p className='text-gray-600 text-sm'>
            Already have an account?{' '}
            <Link
              href='/login'
              className='text-secondary hover:text-primary transition-colors'
            >
              Log in
            </Link>
          </p>

          <p className='text-gray-500 text-xs mt-4'>
            Registration requires an invitation. If you've been invited, please
            use the link sent to your email.
          </p>
        </div>
      </div>
    </div>
  );
}

// Main page component with Suspense boundary
export default function Register() {
  return (
    <Suspense fallback={<div className="max-w-md mx-auto my-12 px-4 text-center">
      <div className="bg-white rounded-lg shadow-md p-8 border-2 border-primary">
        <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4"></div>
        <p className="text-gray-600">Loading registration form...</p>
      </div>
    </div>}>
      <RegisterForm />
    </Suspense>
  );
}
